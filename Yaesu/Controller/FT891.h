// generated by Fast Light User Interface Designer (fluid) version 1.0307

#ifndef FT891_h
#define FT891_h

#include <fstream>
#include <thread>
#include <string>
#include <vector>
#include <chrono>
#include <boost/asio.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/ini_parser.hpp>
#include <boost/asio/serial_port.hpp>
#include "../CAT/Cat.h"
#include <FL/Fl.H>
#include <FL/fl_ask.H>
#include <FL/Fl_Scrollbar.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Input_Choice.H>
#include <FL/Fl_Int_Input.H>
#include <FL/Fl_Timer.H>
#include <FL/Fl_Menu_Item.H>
#include <FL/Fl_Text_Display.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Roller.H>
#include <FL/Fl_Text_Editor.H>
#include <FL/Fl_Counter.H>
#include "AsyncSerial.h"

extern void OnLightButtonClick(Fl_Light_Button*, void*);
extern void OnChoice(Fl_Widget*,void*);
extern void OnOperatingMode(Fl_Widget*, void*);
extern void OnBox(Fl_Button*,void*);
extern void OnRoll(Fl_Value_Slider*, void*);
extern void OnCounter(Fl_Widget*, void*);

enum class UIMode
{
    SSB,
    CW,
    RTTY
};

class FT891 : public Fl_Double_Window
{

int ClarifierValue;
int VFOAFreq;
int VFOBFreq;
int tVFOAFreq;
int dimmerBacklightval;
int hfPowerval;
int HFAmPowerval;
int HFSsbPowerval;
int vhfpowerval;
int vhfssbpowerval;
int vhfampowerval;
int lcdcontrastval;
int dimmerval;
int dimmmertxbusyval;
int AmLcutFreqVal;
int AMOutLevelValue;
int CWOutLevelValue;
int RTTYOutLevelValue;
int DATAOutLevelValue;
int SSBOutLevelValue;
int MicBandWidth1Value;
int MicEq1LevelValue;
int MicBandWidth2Value;
int MicEq2LevelValue;
int MicBandWidth3Value;
int MicEq3LevelValue;

int MicPBandWidth1Value;
int MicPEq1LevelValue;
int MicPBandWidth2Value;
int MicPEq2LevelValue;
int MicPBandWidth3Value;
int MicPEq3LevelValue;
int TXTOTValue;
int AGCFastDelayValue;
int AGCMidDelayValue;
int AGCSlowDelayValue;
int CWWeightValue;
int VoxDelayTimeValue;
int VoxGainLevelValue;
int SquelchLevelValue;
int RFGainValue;
int MicGainValue;
int PowerControlValue;
int VolumeLevel;

std::string dispval;
std::string labelText;
std::string KeyPitchLabelText;
std::string buff;

Yaesu::FT891::Commands::AGCReadValue AGCReadVal;
Yaesu::FT891::Commands::ModeValue mv;
Yaesu::FT891::Commands::WidthValue WidthVal;
Yaesu::FT891::Commands::MeterType MeterTypeValue;
Yaesu::FT891::Commands::KeyerSpeedVal KeyerSpeedValue;
Yaesu::FT891::Commands::FreqLowCutValue AMLCUTFreqValue;
Yaesu::FT891::Commands::FreqSlopeValue AMLCUTSlopeValue;
Yaesu::FT891::Commands::FreqLowCutValue CWLCUTFreqValue;
Yaesu::FT891::Commands::FreqSlopeValue CWLCUTSlopeValue;
Yaesu::FT891::Commands::FreqLowCutValue RTTYLCUTFreqValue;
Yaesu::FT891::Commands::FreqSlopeValue RTTYLCUTSlopeValue;
Yaesu::FT891::Commands::FreqLowCutValue DATALCUTFreqValue;
Yaesu::FT891::Commands::FreqSlopeValue DATALCUTSlopeValue;
Yaesu::FT891::Commands::FreqLowCutValue SSBLCUTFreqValue;
Yaesu::FT891::Commands::FreqSlopeValue SSBLCUTSlopeValue;
Yaesu::FT891::Commands::ClarSelectValue ClarifierTypeValue;
Yaesu::FT891::Commands::EQ1FreqValue MicCenterFreq1Value;
Yaesu::FT891::Commands::EQ2FreqValue MicCenterFreq2Value;
Yaesu::FT891::Commands::EQ3FreqValue MicCenterFreq3Value;
Yaesu::FT891::Commands::EQ1FreqValue MicPCenterFreq1Value;
Yaesu::FT891::Commands::EQ2FreqValue MicPCenterFreq2Value;
Yaesu::FT891::Commands::EQ3FreqValue MicPCenterFreq3Value;
Yaesu::FT891::Commands::APOValue APOVal;
Yaesu::FT891::Commands::FanControlValue FanControlVal;
Yaesu::FT891::Commands::EnableDisableValue MemoryGroupValue;
Yaesu::FT891::Commands::EnableDisableValue FMSettingValue;
Yaesu::FT891::Commands::EnableDisableValue RecSettingValue;
Yaesu::FT891::Commands::EnableDisableValue ATASSettingValue;
Yaesu::FT891::Commands::EnableDisableValue MicScanValue;
Yaesu::FT891::Commands::MicScanResumeValue MicScanResumeVal;
Yaesu::FT891::Commands::CwBreakInType CWBreakInTypeValue;
Yaesu::FT891::Commands::CwWaveShapeValue CwWaveShapeVal;
Yaesu::FT891::Commands::CwFreqDisplayValue CWFreqDisplayVal;
Yaesu::FT891::Commands::PCKeyingValue PCKeyingVal;
Yaesu::FT891::Commands::QskDelayTimeValue QSKDelayTimeVal;
Yaesu::FT891::Commands::DataModeValue DataModeVal;
Yaesu::FT891::Commands::PSKToneValue PSKToneVal;
Yaesu::FT891::Commands::BfoValue SSBbfo;
Yaesu::FT891::Commands::BfoValue CWBfo;
Yaesu::FT891::Commands::DataBfoValue DATABfo;
Yaesu::FT891::Commands::DataBfoValue RTTYBfo;
Yaesu::FT891::Commands::NarrowValue NarrowState;
Yaesu::FT891::Commands::KeyerTypeValue KeyerTypeVal;
Yaesu::FT891::Commands::KeyerDotDashValue KeyerDotDashVal;
Yaesu::FT891::Commands::CWMemoryTypeValue CWMemory1Val;
Yaesu::FT891::Commands::CWMemoryTypeValue CWMemory2Val;
Yaesu::FT891::Commands::CWMemoryTypeValue CWMemory3Val;
Yaesu::FT891::Commands::CWMemoryTypeValue CWMemory4Val;
Yaesu::FT891::Commands::CWMemoryTypeValue CWMemory5Val;
Yaesu::FT891::Commands::KeyerMemoryValue CWMemory1Value;
Yaesu::FT891::Commands::KeyerMemoryValue CWMemory2Value;
Yaesu::FT891::Commands::KeyerMemoryValue CWMemory3Value;
Yaesu::FT891::Commands::KeyerMemoryValue CWMemory4Value;
Yaesu::FT891::Commands::KeyerMemoryValue CWMemory5Value;
Yaesu::FT891::Commands::PTTSelectValue AMPTTSelectValue;
Yaesu::FT891::Commands::PTTSelectValue SSBPTTSelectValue;
Yaesu::FT891::Commands::PTTSelectValue PktPTTSelectValue;
Yaesu::FT891::Commands::PTTSelectValue DATAPTTSelectValue;
Yaesu::FT891::Commands::CatRateValue CatRateSelectValue;
Yaesu::FT891::Commands::CatTOTValue CatTOTSelectValue;

Fl_Box* ChannelLabel;
Fl_Light_Button* PowerButton;
Fl_Tabs* Tabs;
Fl_Group* OutputPowerG;
Fl_Group* HFPowerG;
Fl_Group* VHFPowerG;
Fl_Group* CWG;
Fl_Group* SSBG;
Fl_Group* DigitalG;
Fl_Group* GeneralG;
Fl_Group* MicEQG;
Fl_Group* SPEQG;
Fl_Group* EQGroup;
Fl_Group* Lighting;
Fl_Group* AmSettings;
Fl_Group* CWSettings;
Fl_Group* RTTYSettings;
Fl_Group* DATASettings;
Fl_Group* SSBSettings;
Fl_Group* TXEQGroup;
Fl_Group* MicEQGroup;
Fl_Group* CompEQGroup;
Fl_Group* CWSettingsTab;
Fl_Group* CatSettingsTab;


Fl_Value_Slider* Backlight;
Fl_Value_Slider* HFPower;
Fl_Value_Slider* HFAMPower;
Fl_Value_Slider* HFSSBPower;
Fl_Value_Slider* VHFPower;
Fl_Value_Slider* VHFSSBPower;
Fl_Value_Slider* VHFAMPower;
Fl_Value_Slider* MicGain;
Fl_Value_Slider* RFGain;
Fl_Value_Slider* Squelch;
Fl_Value_Slider* MonitorLevel;
Fl_Value_Slider* KeyerSpeed;
Fl_Value_Slider* Volume;
Fl_Value_Slider* LCD;
Fl_Value_Slider* DNRAlgo;
Fl_Value_Slider* VoxGainLevel;
Fl_Value_Slider* VoxDelayTime;
Fl_Value_Slider* ProcessorLevel;
Fl_Value_Slider* NoiseBlankerLevel;
Fl_Value_Slider* TxBusy;
Fl_Value_Slider* LCDContrast;
Fl_Value_Slider* AMOutLevel;
Fl_Value_Slider* CWOutLevel;
Fl_Value_Slider* RTTYOutLevel;
Fl_Value_Slider* DATAOutLevel;
Fl_Value_Slider* SSBOutLevel;
Fl_Value_Slider* KeyerPitch;
Fl_Value_Slider* BeepLevel;
Fl_Value_Slider* MicEQLevel1;
Fl_Value_Slider* MicBandWidth1;
Fl_Value_Slider* MicEQLevel2;
Fl_Value_Slider* MicBandWidth2;
Fl_Value_Slider* MicEQLevel3;
Fl_Value_Slider* MicBandWidth3;
Fl_Value_Slider* MicPEQLevel1;
Fl_Value_Slider* MicPBandWidth1;
Fl_Value_Slider* MicPEQLevel2;
Fl_Value_Slider* MicPBandWidth2;
Fl_Value_Slider* MicPEQLevel3;
Fl_Value_Slider* MicPBandWidth3;
Fl_Value_Slider* AGCFastDelay;
Fl_Value_Slider* AGCMidDelay;
Fl_Value_Slider* AGCSlowDelay;


Fl_Button* MON;
Fl_Button* NAR;
Fl_Button* IPO;
Fl_Button* ATT;
Fl_Button* NB;
Fl_Button* FST;
Fl_Button* TNR;
Fl_Button* VOX;
Fl_Button* PRC;
Fl_Button* SPL;
Fl_Button* LOCK;
Fl_Button* btnDNR;
Fl_Button* Keyer;
Fl_Button* BreakIn;
Fl_Button* AB;
Fl_Button* BA;
Fl_Button* MV;
Fl_Button* VM;
Fl_Button* V_M;
Fl_Button* UP;
Fl_Button* DOWN;
Fl_Button* McUp;
Fl_Button* McDn;
Fl_Button* ATTune;
Fl_Button* VA_M;
Fl_Button* M_VA;
Fl_Button* QMBS;
Fl_Button* QMBR;
Fl_Button* CLAR;
Fl_Button* PlayCWMessage1;
Fl_Button* PlayCWMessage2;
Fl_Button* PlayCWMessage3;
Fl_Button* PlayCWMessage4;
Fl_Button* PlayCWMessage5;

Fl_Input* VFOA;
Fl_Input* VFOB;

Fl_Input* CWMemoryValue1;
Fl_Input* CWMemoryValue2;
Fl_Input* CWMemoryValue3;
Fl_Input* CWMemoryValue4;
Fl_Input* CWMemoryValue5;

Fl_Choice* OperatingMode;
Fl_Choice* DisplayMode;
Fl_Choice* Width;
Fl_Choice* DNR;
Fl_Choice* Band;
Fl_Choice* AMLCUTFreq;
Fl_Choice* AMLCUTSlope;
Fl_Choice* AMHCUTFreq;
Fl_Choice* AMHCUTSlope;
Fl_Choice* AMMICSelect;
Fl_Choice* AMPTTSelect;
Fl_Choice* CWLCUTFreq;
Fl_Choice* CWLCUTSlope;
Fl_Choice* CWHCUTFreq;
Fl_Choice* CWHCUTSlope;
Fl_Choice* CWMICSelect;
Fl_Choice* CWPTTSelect;
Fl_Choice* DATALCUTFreq;
Fl_Choice* DATALCUTSlope;
Fl_Choice* DATAHCUTFreq;
Fl_Choice* DATAHCUTSlope;
Fl_Choice* DATAMICSelect;
Fl_Choice* DATAPTTSelect;
Fl_Choice* RTTYLCUTFreq;
Fl_Choice* RTTYLCUTSlope;
Fl_Choice* RTTYHCUTFreq;
Fl_Choice* RTTYHCUTSlope;
Fl_Choice* RTTYMICSelect;
Fl_Choice* RTTYPTTSelect;
Fl_Choice* SSBLCUTFreq;
Fl_Choice* SSBLCUTSlope;
Fl_Choice* SSBHCUTFreq;
Fl_Choice* SSBHCUTSlope;
Fl_Choice* SSBMICSelect;
Fl_Choice* SSBPTTSelect;
Fl_Choice* TunerType;
Fl_Choice* ClarifierType;
Fl_Choice* MicCenterFreq1;
Fl_Choice* MicCenterFreq2;
Fl_Choice* MicCenterFreq3;
Fl_Choice* MicPCenterFreq1;
Fl_Choice* MicPCenterFreq2;
Fl_Choice* MicPCenterFreq3;
Fl_Choice* APO;
Fl_Choice* FanControl;
Fl_Choice* MemGroup;
Fl_Choice* FMSetting;
Fl_Choice* RECSetting;
Fl_Choice* ATASSetting;
Fl_Choice* TXTot;
Fl_Choice* MicScan;
Fl_Choice* MicScanResume;
Fl_Choice* CWBreakInType;
Fl_Choice* CWWaveShape;
Fl_Choice* CWFreqDisplay;
Fl_Choice* PCKeying;
Fl_Choice* QSKDelayTime;
Fl_Choice* DataMode;
Fl_Choice* PSKTone;
Fl_Choice* KeyerType;
Fl_Choice* KeyerDotDash;
Fl_Choice* CWWeight;
Fl_Choice* CWMemory1Setting;
Fl_Choice* CWMemory2Setting;
Fl_Choice* CWMemory3Setting;
Fl_Choice* CWMemory4Setting;
Fl_Choice* CWMemory5Setting;
Fl_Choice* PktPTTSelect;
Fl_Choice* CatRateSelect;
Fl_Choice* CatTOTSelect;

Fl_Counter* Clarifier;

Fl_Timer* refresh;
CallbackAsyncSerial m_port;

bool CatSettingsLoaded,
     TXEQGroupLoaded,
     EQGroupLoaded,
     CWGroupLoaded,
     PowerGroupLoaded,
     LightingGrouploaded;
void PowerUp();
void PowerDown();
void ReadPowerSwitch();
void BuildGeneralGroup(int w, int h);
void BuildPowerGroup(int w, int h);
void BuildLightingGroup(int w, int h);
void BuildTXEQGroup(int w, int h);
void BuildRxEQGroup(int w, int h);
void BuildCWSettings(int w, int h);
void BuildCatSettings(int w, int h);
void BuildUI(int w, int h);
void SetBand();
void readCallback(const char*, int);
void CalcMode(Yaesu::FT891::Commands::ModeValue);
void CalculateWidth(Yaesu::FT891::Commands::WidthValue);
UIMode GetUIMode();

void Init();

public:

FT891(int w, int h);
FT891(int w, int h, std::string prt, int spd);
void SetMeterType(Fl_Widget*, void*);
void SetOperatingMode();
void OnBox(Fl_Button*,void*);
void OnScroll(Fl_Value_Slider*, void*);
void OnRoll(Fl_Value_Slider*, void*);
void OnCounter(Fl_Counter*, void*);
void OnMessageUpdate(Fl_Input* o);
void OnPowerButtonClick(Fl_Light_Button* o, void* v);
int OnTextEnter(int Key, Fl_Input*);
void OnTabChanged(Fl_Tabs*);

};

void TimerCallback(void *);
void OnEnter(Fl_Input* ,void*);
void OnMessageText(Fl_Input*, void*);
void OnTabChanged(Fl_Tabs*, void*);
void OnOk(Fl_Button*, void*);
class ComPortDialog : public Fl_Window
{
public:
    ComPortDialog();
    Yaesu::FT891::Commands::CatRateValue Rate;
    std::string m_PortName;
    Fl_Choice* CatRateChoice;
    Fl_Input* PortName;
    Fl_Button* Ok;
    void OkClicked();
};
#endif